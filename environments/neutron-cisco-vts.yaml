# A Heat environment file which can be used to enable Cisco VTS extensions, configured via puppet
resource_registry:
  OS::TripleO::Services::NeutronCorePlugin: OS::TripleO::Services::NeutronCorePluginVTS
  OS::TripleO::Services::ComputeNeutronCorePlugin: OS::Heat::None
  # TODO: we need different configs on compute nodes than controller nodes.
  # we need to create another service file in puppet directory for compute and link it here.

  # We'll add VTS agent when its service is implemented.
  #OS::TripleO::Services::ComputeNeutronOvsAgent: ../puppet/services/neutron-cisco-vts-agent.yaml
  #or this OS::TripleO::Services::VTSAgent: ../puppet/services/neutron-cisco-vts-agent.yaml

  # Disabling Neutron services that overlap with VTS
  OS::TripleO::Services::NeutronOvsAgent: OS::Heat::None
  OS::TripleO::Services::ComputeNeutronOvsAgent: OS::Heat::None
  OS::TripleO::Services::NeutronL3Agent: OS::Heat::None

  # VPFA Configuration
  OS::TripleO::Services::CiscoVpfa: ../puppet/services/cisco-vpfa.yaml

  # VPP Config generation
  OS::TripleO::ComputeExtraConfigPre: /usr/share/openstack-tripleo-heat-templates/puppet/extraconfig/pre_deploy/cisco_vts_vpp.yaml
  #OS::TripleO::ControllerExtraConfigPre: /usr/share/openstack-tripleo-heat-templates/puppet/extraconfig/pre_deploy/cisco_vts_vpp.yaml
  #OS::TripleO::NodeExtraConfig: /usr/share/openstack-tripleo-heat-templates/puppet/extraconfig/pre_deploy/cisco_vts_vpp.yaml

  # VPP Module Config (mutually exclusive with VPP Config generation above)
  # OS::TripleO::Services::Vpp: ../puppet/services/vpp.yaml

parameter_defaults:

  ###############
  ### General ###
  ###############
  #VTSUsername: 'admin'
  #VTSPassword: ''
  #VTSServer: '192.168.0.1'
  #VTSVMMID: ''

  ###################
  ### Neutron ML2 ###
  ###################
  #NeutronCorePlugin: 'neutron.plugins.ml2.plugin.Ml2Plugin'
  NeutronMechanismDrivers: 'sriovnicswitch,cisco_vts'
  NeutronTypeDrivers: 'vxlan,vlan,flat'
  NeutronServicePlugins: 'cisco_vts_router,trunk'

  ########################
  ### VTS Agent Config ###
  ########################

  #VTSTimeout:
  VTSPhysicalNet: ''
  VTSRetries: 5
  VTSPollingInterval: 120

  ###################
  ### VPFA Config ###
  ###################

  #VPFAHostname: 'foo'
  ComputeHostName: 'foo.com'
  NetworkConfigMethod: 'static'
  NetworkNameServerIP: ''
  VifType: 'vhostuser'
  UnderlayInterface: 'ens224'
  UnderlayIpNewtorksList: '11.0.0.1/24'
  VTSNetworkIPv4Gateway: '10.0.0.1'

  # VPFA Configuration requires the assignment of an underlay IP address for the VPFA per node.
  # This needs to be specified against the UUID of the target node in a JSON data blob.
  # To derive the UUID, after node introspection execute the following CLI command steps:
  #
  # 1. 'ironic node-list'. Note Openstack ID of the target node
  # 2. 'openstack baremetal introspection data save <Openstack ID from step1> | jq .extra.system.product.uuid
  # 3. Note the Node UUID and use it in the json configuration blob below. Multiple nodes can be specified.
  PerNodeData: |
    {"< Node UUID >":
      {"vts::vtf_underlay_ip_v4": "10.0.0.2",
       "vts::vtf_underlay_mask_v4": "/24"}
    }

  ###################
  ### VPP Config  ###
  ###################

  # Flag to control generation of VPFA config. Set to "False" if using the OSPD VPP Module.
  VPFAInit: "False"

  # When VPFAInit is set to true, the following VPP parameters need to be provided by means
  # of a json data blob e.g:
  #      parameter_defaults:
  #        VPPparams: |
  #          {"ENABLE_VPP_WORKERS": True,
  #           "PCI_DRIVER": "vfio_pci"}
  VPPparams: |
    {"RECONFIGURE": "False",
    "ENABLE_VPP_WORKERS": "False",
    "ENABLE_JUMBO_FRAMES": "True",
    "ENABLE_LLDP": "True",
    "MAX_MTU_SIZE": "9000",
    "HEADERS_FOR_VPP": "64",
    "PCI_DRIVER": "uio_pci_generic",
    "HOSTCPUS": "2",
    "VIF_TYPE": "vhostuser",
    "VPPCPUS": "1",
    "L2_MODE": "True"}
