heat_template_version: 2015-04-30

description: Generate VPP configuration

parameters:
  server:
    description: ID of the controller node to apply this config to
    type: string

  # VPPparams this needs to be a json blob e.g:
  #      parameter_defaults:
  #        VPPparams: |
  #          {"ENABLE_VPP_WORKERS": True,
  #           "PCI_DRIVER": "vfio_pci"}
  VPPparams:
    type: json
    default: ''
    description: json string containing per-node configuration map
  UnderlayInterface:
    description: Name of underlay interface or bond mode
    type: string
    default: ''
  BondIfList:
    description: (Optional) List of underlay interfaces to bond
    type: comma_delimited_list
    default: ''
  UnderlayIpNewtorksList:
    description: List of other underlay networks reachable through the underlay interface
    type: comma_delimited_list
    default: ''

# Install of vpfa_init.sh and dpdk_nic_bind.py is required to carry out the configuration.
resources:
  CustomExtraConfigPre:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
      - name: vpp_conf
      config: |
        #!/bin/bash
        echo $vpp_conf > /tmp/conf_in
        echo $vpp_conf | python -c "
        import ast
        import os
        import subprocess
        import six
        import sys

        VPFA_INIT = 'vpfa_init.sh > /tmp/vpp_script_out'

        input = sys.stdin.readline() or '{}'
        input = ast.literal_eval(input)
        env_params = dict()
        for i in input:
          env_params.update(i)
        vpp_params = env_params.pop('VPP_PARAMS')
        for k, v in six.iteritems(vpp_params):
          env_params[k] = v
        for k, v in six.iteritems(env_params):
          if isinstance(v, list):
            v = ','.join(v)
            env_params[k] = v

        sproc = subprocess.Popen(VPFA_INIT.split(), env=dict(os.environ, **env_params))
        output, error = sproc.communicate()
        print('OUTPUT: {0}  ERROR: {1}'.format(output, error))
        " > /tmp/extra_conf_out


  CustomExtraDeploymentPre:
    type: OS::Heat::SoftwareDeployment
    properties:
      name: Cisco_VPFA_ExtraConfig
      config: {get_resource: CustomExtraConfigPre}
      server: {get_param: server}
      input_values:
        vpp_conf:
            - VPP_PARAMS: {get_param: VPPparams}
            - UNDERLAY_IF_NAME: {get_param: UnderlayInterface}
            - BOND_IF_LIST: {get_param: BondIfList }
            - UNDERLAY_IP_NET_LIST: {get_param: UnderlayIpNewtorksList}

outputs:
  deploy_stdout:
    description: Deployment reference, used to trigger puppet apply on changes
    value: {get_attr: [CustomExtraDeploymentPre, deploy_stdout]}
